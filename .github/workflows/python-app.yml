name: Deploy to EKS

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - dev 
            - 'feature/*'

jobs:
    unit-tests:
        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.13'

            - name: Install dependencies
              working-directory: app/       
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest

            - name: Run unit tests
              working-directory: app/
              run: |
                pytest  
    
    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        needs: unit-tests
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.13'

            - name: Install dependencies
              working-directory: app/
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest pytest-cov

            - name: Run tests with coverage
              working-directory: app/
              run: |
                pytest --cov=. --cov-report=xml

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                file: ./coverage.xml
                token: ${{ secrets.CODECOV_TOKEN }}

            - name: Archive Coverage Result
              if:  always()                                       ## excute even the previous steps fails
              uses: actions/upload-artifact@v4
              with:
                name: Code-Coverage-Result
                path: ./coverage.xml
                retention-days: 3

    report-to-s3:
        name: AWS S3 - Upload Coverage Reports
        runs-on: ubuntu-latest
        needs: code-coverage
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            
            - name: Download Code Coverage Artifact
              uses: actions/download-artifact@v4
              with:
                name: Code-Coverage-Result

            - name: Rename coverage report
              run: |
                ls -ltr
                mv coverage.xml coverage-reports-${{ github.sha }} 

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Upload coverage report to S3
              run: |
                aws s3 cp ./coverage-reports-${{ github.sha }} s3://dev-account-samboo/audit-app-coverage-report/coverage-reports-${{ github.sha }}

    docker-deploy:
        runs-on: ubuntu-latest
        needs: [unit-tests, code-coverage, report-to-s3] 
        env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}  
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
            IMAGE_TAG: ${{ github.sha }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build Docker image
              run: |
                 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

            - name: Push Docker image to ECR
              run: |
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

# add deploy to eks
# add slack notification
# monitoring and alerting
# terraform for infra